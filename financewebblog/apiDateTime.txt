To work with date and time in an Angular application, you can use the popular library called date-fns. It is a lightweight and modular library that provides various utility functions for manipulating dates in a more human-readable format.

First, you'll need to install the library:

npm install date-fns

Next, you can import the required functions in your Angular component or service:


import { format, addDays, differenceInDays } from 'date-fns';
Here's an example of how you can use date-fns in an Angular component:


import { Component } from '@angular/core';
import { format, addDays, differenceInDays } from 'date-fns';

@Component({
  selector: 'app-root',
  template: `
    <p>Today's date: {{ today }}</p>
    <p>Date after 10 days: {{ dateAfterTenDays }}</p>
    <p>Difference in days: {{ daysDifference }} days</p>
  `,
})
export class AppComponent {
  today: string;
  dateAfterTenDays: string;
  daysDifference: number;

  constructor() {
    const currentDate = new Date();
    this.today = format(currentDate, 'PPPP');
    this.dateAfterTenDays = format(addDays(currentDate, 10), 'PPPP');
    this.daysDifference = differenceInDays(addDays(currentDate, 10), currentDate);
  }
}
In this example, we display today's date, the date after 10 days, and the difference in days using date-fns utility functions.

You can find more information about date-fns and its available functions in the official documentation: https://date-fns.org/docs/Getting-Started


import { Component, OnInit, OnDestroy } from '@angular/core';
import { format, addDays, differenceInDays } from 'date-fns';

@Component({
  selector: 'app-root',
  template: `
    <p>Current date and time with ticking seconds: {{ currentTime }}</p>
    <p>Date and time after 10 days: {{ dateAfterTenDays }}</p>
    <p>Difference in days: {{ daysDifference }} days</p>
  `,
})
export class AppComponent implements OnInit, OnDestroy {
  currentTime: string;
  dateAfterTenDays: string;
  daysDifference: number;
  timer: any;

  ngOnInit() {
    const currentDate = new Date();
    this.updateCurrentTime();
    this.dateAfterTenDays = format(addDays(currentDate, 10), 'Pp');
    this.daysDifference = differenceInDays(addDays(currentDate, 10), currentDate);

    // Update the time every second (1000ms)
    this.timer = setInterval(() => {
      this.updateCurrentTime();
    }, 1000);
  }

  ngOnDestroy() {
    // Clear the interval when the component is destroyed
    clearInterval(this.timer);
  }

  updateCurrentTime() {
    this.currentTime = format(new Date(), 'Pp');
  }
}


******************************************************************************************************
******************************************************************************************************

When you install a package or library using npm (Node Package Manager) in an Angular project, the package is saved in the node_modules folder located in your project root directory. This folder contains all the third-party libraries and packages that your Angular application depends on.

For example, if you installed date-fns using:

lua
Copy code
npm install date-fns
You can find the installed package inside the node_modules folder:

css
Copy code
your-project-root/
  ├─ node_modules/
  │   ├─ ...
  │   ├─ date-fns/
  │   │   ├─ ...
  │   ├─ ...
  ├─ src/
  ├─ ...

******************************************************************************************************
******************************************************************************************************



API for Currency
______________________________________
______________________________________
import { Component } from '@angular/core';
import { format, addDays, differenceInDays } from 'date-fns';
import { faEnvelope } from '@fortawesome/free-solid-svg-icons';
import { faFacebook, faTwitter, faInstagram } from '@fortawesome/free-brands-svg-icons';
import { HttpClient } from '@angular/common/http'; // import HttpClient
import { interval } from 'rxjs';




interface ExchangeRateData {
  rates: { [key: string]: number};
}

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})




export class AppComponent {

  title = 'financewebblog';
  currentTime: string | undefined;
  //dateAfterTenDays: string;
  //daysDifference: number;
  timer: any;


  currencies = ['GBP','EUR','CHF', 'AUD', 'CAD', 'INR', 'JPY','CNY','NPR','NZD','SGD','KRW'];
  currencyData: { [key: string]: any } = {};


  constructor(private http: HttpClient) { } // add private http: HttpClient to the constructor


  ngOnInit() {
    const currentDate = new Date();
    this.updateCurrentTime();
    //this.dateAfterTenDays = format(addDays(currentDate, 10), 'Pp');
    //this.daysDifference = differenceInDays(addDays(currentDate, 10), currentDate);

    // Update the time every second (1000ms)
    this.timer = setInterval(() => {
      this.updateCurrentTime();
    }, 1000);

    // Call the getCurrencyData() method every second
    interval(1000).subscribe(() => {
      this.getCurrencyData();
    });
  }

  ngOnDestroy() {
    // Clear the interval when the component is destroyed
    clearInterval(this.timer);
  }

  updateCurrentTime() {
    this.currentTime = format(new Date(), 'Pp');
  }


  getCurrencyData() {
    // Define the API endpoint and API key
    const apiKey = 'bc5517787b5b49b5aab23f522877b04b';
    const endpoint = 'https://openexchangerates.org/api/latest.json';
    // Use the HttpClient service to retrieve the currency data for each currency
    this.http.get<ExchangeRateData>(`${endpoint}?app_id=${apiKey}`).subscribe(data => {
      this.currencies.forEach(currency => {
        this.currencyData[currency] = data.rates[currency].toFixed(2);
      });
    });
  }


  /*
  getCurrencyData() {
    // Define the API endpoint and API key
    const apiKey = 'bc5517787b5b49b5aab23f522877b04b';
    const endpoint = 'https://openexchangerates.org/api/latest.json';
  
    // Use the HttpClient service to retrieve the currency data for each currency
    this.http.get(`${endpoint}?app_id=${apiKey}`).subscribe(data => {
      this.currencies.forEach(currency => {
        this.currencyData[currency] = data.rates[currency];
      });
    });
  }
  */

}




<div class="currency">
<ul>
  <li *ngFor="let currency of currencies">
    {{ currency }}:
    <ng-container *ngIf="currencyData[currency] !== undefined">
      {{ currencyData[currency] }}
    </ng-container>
    <ng-container *ngIf="currencyData[currency] === undefined">
      Retrieving data...
    </ng-container>
  </li>
</ul>
</div>




.currency{
  color:midnightblue;
  cursor: pointer;

}
.currency ul{
  display: flex;
  flex-direction: row;
  gap:10px;
  list-style: none;
  padding-top: 15px;
  margin: 0 0 0 3px;
 
}
 .currency li{
  font-size: 16px;
  font-weight: bold;
  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
  background-color: rgb(240, 237, 234);
  padding: 15px;
  border: 1px solid gray;
}